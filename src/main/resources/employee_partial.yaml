openapi: 3.0.3
info:
  title: "Microservice - Employees"
  description: "A Microservice Employees for Company XPTO"
  contact: {
    name: "Api Suport",
    url: "http://www.example.com/support",
    email: "carlosmedeiroslima@gmail.com"
  }
  license: {
    name: "Apache 2.0",
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  }
  version: 1.0.0

servers: [
  {
    url : "https://development.gigantic-server.com/v1",
    description : "dev",
  }
]
#tags:
#  - name: Employees
#    description: Employees Data
paths:
  /employees:
    get:
      tags:
        - Employees
      summary: Returns all employees from the system
      description: Returns all employees from the system that the user has access to the employee
      operationId: getEmployees
      parameters: []
      responses:
        '200':
          description: Correct operation of get all Employees
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
        #'401':
        #  description: Unauthorize
        #  content:
        #    application/json:
        #      schema:
        #          $ref: '#/components/schemas/ErrorResponse'
        #'500':
        #  description: Internal Server Error
        #  content:
        #    application/json:
        #      schema:
        #          $ref: '#/components/schemas/ErrorResponse'
        #default:
        #  description: Generic Erorr - Unknown Error
        #  content:
        #    application/json:
        #      schema:
        #        $ref: '#/components/schemas/UnknownError'
#    post:
#      tags:
#        - Employees
#      summary: Creates a new Employee in the store.
#      description: Creates a new Employee in the store. Duplicates are not allowed
#      operationId: addEmployee
#      requestBody:
#        description: Employee to add to the store
#        required: true
#        content:
#          application/x-www-form-urlencoded:
#            schema:
#              $ref: '#/components/schemas/EmployeeRequest'
#      responses:
#        '201':
#          description: Correct operation of create Employee
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/EmployeeResponse'
#                  #'401':
#                  #  description: Unauthorize
#                  #  content:
#                  #    application/json:
#                  #      schema:
#                  #          $ref: '#/components/schemas/ErrorResponse'
#
#        #'500':
#        #  description: Internal Server Error
#        #  content:
#        #    application/json:
#        #      schema:
#        #        $ref: '#/components/schemas/ErrorResponse'
#
#        #default:
#        #  description: Generic Erorr - Unknown Error
#        #  content:
#        #    application/json:
#        #      schema:
#        #        $ref: '#/components/schemas/UnknownError'
#
#  /employees/{employeeId}:
#    get:
#      tags:
#        - Employees
#      summary: Returns a user based on a single ID.
#      description: Returns a user based on a single ID, if the user does not have access to the employee
#      operationId: employeeId
#      parameters:
#        - name: employeeId
#          in: path
#          description: ID of employees to fetch
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '200':
#          description: Correct operation of get EmployeeById
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/EmployeeResponse'
#                  #'401':
#                  #  description: Unauthorize
#                  #  content:
#                  #    application/json:
#                  #      schema:
#                  #          $ref: '#/components/schemas/ErrorResponse'
#
#        #'500':
#        #  description: Internal Server Error
#        #  content:
#        #    application/json:
#        #      schema:
#        #          $ref: '#/components/schemas/ErrorResponse'
#
#        #default:
#        #  description: Generic Erorr - Unknown Error
#        #  content:
#        #    application/json:
#        #      schema:
#        #        $ref: '#/components/schemas/UnknownError'
#
#    put:
#      tags:
#        - "Employees"
#      summary: "Update an existing Employee to refresh"
#      description: "Update an existing Employee to refresh"
#      operationId: "updateEmployee"
#      parameters:
#        - in: "path"
#          name: "employeeId"
#          description: "Employee object that needs to be added to the store"
#          required: true
#          schema:
#            type: integer
#      requestBody:
#        content:
#          application/x-www-form-urlencoded : {
#            schema: {
#              $ref: "#/components/schemas/EmployeeRequest"
#            }
#          }
#      responses:
#        '200':
#          description: Correct operation of get EmployeeById
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/EmployeeResponse'
#          #'400':
#          #  description: "Invalid ID supplied"
#
#        #'401':
#        #  description: Unauthorize
#        #  content:
#        #    application/json:
#        #      schema:
#        #          $ref: '#/components/schemas/ErrorResponse'
#        #'404':
#        #  description: "Pet not found"
#        #"405":
#        #  description: "Validation exception"
#
#        #'500':
#        #  description: Internal Server Error
#        #  content:
#        #    application/json:
#        #      schema:
#        #          $ref: '#/components/schemas/ErrorResponse'
#
#        #default:
#        #  description: Generic Erorr - Unknown Error
#        #  content:
#        #    application/json:
#        #      schema:
#        #        $ref: '#/components/schemas/UnknownError'
#    delete:
#      tags:
#        - Employees
#      summary: deletes a single employee based on the ID supplied
#      description: deletes a single employee based on the ID supplied
#      operationId: deleteEmployee
#      parameters:
#        - name: employeeId
#          in: path
#          description: ID of employee to delete
#          required: true
#          schema:
#            type: integer
#            format: int64
#      responses:
#        '204':
#          description: employee deleted
#
#            #'401':
#            #  description: Unauthorize
#            #  content:
#            #    application/json:
#            #      schema:
#            #          $ref: '#/components/schemas/ErrorResponse'
#
#        #'500':
#        #  description: Internal Server Error
#        #  content:
#        #    application/json:
#        #      schema:
#        #          $ref: '#/components/schemas/ErrorResponse'
#
#        #default:
#        #  description: Generic Erorr - Unknown Error
#        #  content:
#        #    application/json:
#        #      schema:
#        #        $ref: '#/components/schemas/UnknownError'
components:
  schemas:
#    EmployeeRequest:
#      allOf:
#        - $ref: '#/components/schemas/EmployeeRequest'
#        - type: object
#          required:
#            - employeeName
#            - employeeAddress
#            - employeeNumber
#            - employeeType
#          properties:
#            employeeName:
#              type: string
#            employeeAddress:
#              type: string
#            employeeNumber:
#              type: string
#            employeeType:
#              type: string
    EmployeeResponse:
        type: object
        required:
          - id
        properties:
          employeeId:
            type: integer
            format: int64
          employeeName:
            type: string
          employeeAddress:
            type: string
          employeeNumber:
            type: string
          employeeType:
            type: string
    #ErrorResponse:
    #  type: object
    #  required:
    #    - name
    #  properties:
    #    name:
    #      type: string
    #    tag:
    #      type: string
    #UnknownError:
    #  type: object
    #  required:
    #    - message
    #  properties:
    #    message:
    #      type: string

    #CreateEmployeeResponse:
    #  type: object
    #  required:
    #    - message
    #  properties:
    #    message:
    #      type: string
    #Employee:
    #  type: object
    #  required:
    #    - message
    #  properties:
    #    message:
    #      type: string
    #UpdateEmployeeRequest:
    #  type: object
    #  required:
    #    - message
    #  properties:
    #    message:
    #      type: string